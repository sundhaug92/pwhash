[package]
name = "pwhash"
version = "1.0.0"
authors = ["Ivan Nejgebauer <inejge@gmail.com>"]
description = "A collection of password hashing routines in pure Rust."
documentation = "https://inejge.github.io/pwhash"
homepage = "https://github.com/inejge/pwhash"
repository = "https://github.com/inejge/pwhash"
readme = "README.md"
license = "MIT"
keywords = ["password", "hash", "hashing", "crypt"]
categories = ["cryptography", "authentication"]
edition = "2021"

[features]

default = ["md5crypt", "sha1crypt", "sha2crypt", "descrypt", "bcrypt", "unix_crypt"]

# For now, *crypt is a whole feature each, rather than split into common, verify, generate with random salt, and generate with specific salt
md5crypt = ["dep:md-5"]
sha1crypt = ["dep:sha-1", "dep:hmac"]
sha2crypt = ["dep:sha2"]

# For now, we have to have a dependency "up" towards unix_crypt, and have descrypt be a singular thing rather than split into bsdi_crypt and descrypt
descrypt = ["unix_crypt"]

bcrypt = ["dep:blowfish", "dep:byteorder"]

unix_crypt = ["descrypt"]

[dependencies]
md-5 = { version = "0.10.1", optional = true }
sha-1 = { version = "0.9", optional = true }
sha2 = { version = "0.9", optional = true }
blowfish = { version = "0.8.0", features = ["bcrypt"], optional = true }
hmac = { version = "0.10", optional = true }
byteorder = { version = "1", optional = true }

# Rand is required _for now_
rand = "0.8"
